import React, { Component } from "react";

import { AsyncStorage, PermissionsAndroid, YellowBox, Vibration } from "react-native";
import PushNotification from "react-native-push-notification";
import Map from "../components/Map";
console.ignoredYellowBox = ["Remote debugger"];

YellowBox.ignoreWarnings([
  "Unrecognized WebSocket connection option(s) `agent`, `perMessageDeflate`, `pfx`, `key`, `passphrase`, `cert`, `ca`, `ciphers`, `rejectUnauthorized`. Did you mean to put these under `headers`?",
  "Async Storage has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/async-storage' instead of 'react-native'. See https://github.com/react-native-community/react-native-async-storage"
]);

export default class Mapa extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentWillMount(){
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function(token) {
        console.log("TOKEN:", token);
      },
      onNotification: function(notification) {
        console.log("NOTIFICATION:", notification);
      },
      permissions: {
        alert: true,
        badge: false,
        sound: true
      },
      popInitialNotification: true,
      requestPermissions: true
    });
    
  }
  async componentDidMount() {
    console.log("Confere as Permissões");
    await this.requestLocationPermission();
    const token = await AsyncStorage.getItem("@CodeApi:token");
    if (!token) {
      this.props.navigation.navigate("login");
    }
    
  }
  componentWillUnmount() {
    console.log("Aplicativo em Background");
  }
  /*
      FUNÇÕES GLOBAIS
  */
  showNotification = (title, message) => {
    console.log("Notificação", title, message);
    Vibration.vibrate(5000);
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: title, // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: message,
      //subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
     // tag: 'some_tag', // (optional) add tag to message
      //group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
   
   
      /* iOS and Android properties */
      title: title, // (optional)
      message: message, // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
  
    });
  };

  requestLocationPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION &&
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: "Motoroute Corridas Permissão de Localidade",
          message:
            "Motoroute precisa acessar sua localidade " +
            "para poder informar o piloto da sua localização.",
          buttonNeutral: "Pergunte-me depois",
          buttonNegative: "Cancelar",
          buttonPositive: "OK"
        }
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log("Você já pode usar o aplicativo");
      } else {
        console.log("O aplicativo não pode continuar sem a permissão.");
      }
    } catch (err) {
      console.warn(err);
    }
  };

  render() {
    return <Map showNotification={this.showNotification} />;
  }
}
